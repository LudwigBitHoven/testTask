{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u00b6 \u0412 \u043f\u0430\u043d\u0435\u043b\u0438 \u0441\u043b\u0435\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447 \u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u00b6 +79046177049 - \u0427\u0430\u043f\u0442\u044b\u043a\u043e\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432\u0438\u0447 TG - @vanbithoven","title":"Home"},{"location":"#_1","text":"\u0412 \u043f\u0430\u043d\u0435\u043b\u0438 \u0441\u043b\u0435\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e"},{"location":"#_2","text":"+79046177049 - \u0427\u0430\u043f\u0442\u044b\u043a\u043e\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432\u0438\u0447 TG - @vanbithoven","title":"\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"},{"location":"answer_0/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u00b6 \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043c\u0441\u044f \u043a \u0431\u0434: import sqlite3 connection = sqlite3.connect(\"test.db\") with connection: res = connection.execute(\"SELECT * FROM prices\") print(res.fetchall())","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432 \u0431\u0434"},{"location":"answer_0/#_1","text":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043c\u0441\u044f \u043a \u0431\u0434: import sqlite3 connection = sqlite3.connect(\"test.db\") with connection: res = connection.execute(\"SELECT * FROM prices\") print(res.fetchall())","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"answer_1/","text":"1. \u0417\u0430\u0434\u0430\u0447\u0430 \u00b6 \u0414\u0430\u043d \u0437\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c: select distinct partner_code,vid_nom, warehouse, sum(count) over (partition by partner_code,vid_nom) from guid g, prices p, revenue r where g.id_guid = p.id_guid and p.id_guid = r.id_guid; \u041f\u0435\u0440\u0432\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 DISTINCT \u0438 OVER. \u042d\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c GROUP BY \u0432 \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 select partner_code,vid_nom, warehouse, sum(count) from guid g, prices p, revenue r where g.id_guid = p.id_guid and p.id_guid = r.id_guid GROUP BY partner_code, vid_nom, warehouse; \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u044d\u0442\u043e \u0438\u043c\u043f\u043b\u0438\u0446\u0438\u0442\u043d\u044b\u0439 join, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0435\u0433\u043e \u043d\u0430 INNER JOIN SELECT r.partner_code, g.vid_nom, r.warehouse, sum(r.count) FROM guid g INNER JOIN revenue r ON p.id_guid = r.id_guid INNER JOIN prices p ON g.id_guid = p.id_guid GROUP BY r.partner_code, g.vid_nom, r.warehouse; \u0422\u0440\u0435\u0442\u044c\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u044d\u0442\u043e join \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b revenue \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 guid \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0435\u0451 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438, \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \"guid g\" \u0438 \"revenue r\" \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 join \u0438 from. \u0414\u0430\u0434\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u043f\u043e count \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 SELECT r.partner_code, g.vid_nom, r.warehouse, sum(r.count) AS \"count sum\" FROM revenue r INNER JOIN guid g ON p.id_guid = r.id_guid INNER JOIN prices p ON g.id_guid = p.id_guid GROUP BY r.partner_code, g.vid_nom, r.warehouse; \u0418\u0442\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u043e 36.423 \u0441, \u043f\u043e\u0441\u043b\u0435 1.414 \u0441.","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430"},{"location":"answer_1/#1","text":"\u0414\u0430\u043d \u0437\u0430\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c: select distinct partner_code,vid_nom, warehouse, sum(count) over (partition by partner_code,vid_nom) from guid g, prices p, revenue r where g.id_guid = p.id_guid and p.id_guid = r.id_guid; \u041f\u0435\u0440\u0432\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 DISTINCT \u0438 OVER. \u042d\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c GROUP BY \u0432 \u043a\u043e\u043d\u0446\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 select partner_code,vid_nom, warehouse, sum(count) from guid g, prices p, revenue r where g.id_guid = p.id_guid and p.id_guid = r.id_guid GROUP BY partner_code, vid_nom, warehouse; \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u044d\u0442\u043e \u0438\u043c\u043f\u043b\u0438\u0446\u0438\u0442\u043d\u044b\u0439 join, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0435\u0433\u043e \u043d\u0430 INNER JOIN SELECT r.partner_code, g.vid_nom, r.warehouse, sum(r.count) FROM guid g INNER JOIN revenue r ON p.id_guid = r.id_guid INNER JOIN prices p ON g.id_guid = p.id_guid GROUP BY r.partner_code, g.vid_nom, r.warehouse; \u0422\u0440\u0435\u0442\u044c\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u044d\u0442\u043e join \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b revenue \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 guid \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0435\u0451 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438, \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \"guid g\" \u0438 \"revenue r\" \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u0445 join \u0438 from. \u0414\u0430\u0434\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u043f\u043e count \u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 SELECT r.partner_code, g.vid_nom, r.warehouse, sum(r.count) AS \"count sum\" FROM revenue r INNER JOIN guid g ON p.id_guid = r.id_guid INNER JOIN prices p ON g.id_guid = p.id_guid GROUP BY r.partner_code, g.vid_nom, r.warehouse; \u0418\u0442\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u043e 36.423 \u0441, \u043f\u043e\u0441\u043b\u0435 1.414 \u0441.","title":"1. \u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"answer_2/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u00b6 \u0412 \u043f\u0430\u043f\u043a\u0435 partners \u043b\u0435\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e xlsx \u0444\u0430\u0439\u043b\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043b\u044c\u0435\u043c \u0438\u0445 \u0432\u0441\u0435, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0432 \u0438\u0445 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c. \u0414\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f xlsx \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f create_merged_df, \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0442\u0435\u0439 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b xslx-\u043a\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b\u044b, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u044b\u043d\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0438 \u043a\u043e\u043d\u043a\u0430\u0442\u0430\u043d\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043a\u043e\u043d\u0446\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430: def create_merged_df(paths: List[str]): \"\"\" concatenates all dfs in the directory in a single one to rule them all \"\"\" dfs = [] for path in paths: temp = pd.read_excel(path, sheet_name=None)[\"Sheet1\"] dfs.append(temp) df = pd.concat(dfs) df.columns = [\"partner\", \"partner_code\"] return df \u041f\u0440\u0438 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044f check_if_duplicates \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 bool, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430: def check_if_duplicates(df): \"\"\" checks whether dfs contain any dupliacte rows \"\"\" pivot = pd.pivot_table(df, values=\"partner_code\", index=\"partner\", aggfunc=\"count\") if pivot[pivot[\"partner_code\"] > 1].shape[0] == 0: return False return True \u0414\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f to_sql \u0438\u0437 pandas: df.to_sql(\"partners\", con=connection, if_exists='append') \u041a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0430 revenue \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u043c\u0435\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u044e\u0447 \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 partners, \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u043d\u0435\u043b\u043e\u0432\u043a\u043e, \u043d\u043e \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e. \u042d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c, \u0438\u043c\u043f\u043e\u0440\u0442\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438 \u0437\u0430\u043c\u0435\u043d\u043e\u0439 \u0441\u0442\u0430\u0440\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u0432\u0435\u0436\u0435\u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439. \u042d\u0442\u043e \u043d\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043d\u043e\u0432\u043e \u0442\u0440\u0430\u0442\u0438\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u0431\u0435\u0440\u0435\u0442 \u0432\u0435\u0440\u0445: def create_foreign_key(): \"\"\" whacky sql query for creating FOREIGN KEY constraint in revenue; renames old table, creates new one with the FOREIGN KEY constraint, loads data from the old to the new table and finally drops the old table \"\"\" connection = sqlite3.connect(\"../test.db\") # path to test.db cur = connection.cursor() cur.execute(\"\"\"ALTER TABLE \"revenue\" RENAME TO \"revenue_old\";\"\"\") cur.execute( \"\"\" CREATE TABLE \"revenue\" ( \"index\" INTEGER, \"id_guid\" TEXT, \"date_sale\" TEXT, \"warehouse\" TEXT, \"registr\" TEXT, \"partner_code\" TEXT, \"count\" TEXT, \"price_deal\" TEXT, FOREIGN KEY(partner_code) REFERENCES partners(partner_code)); \"\"\"); cur.execute(\"\"\"INSERT INTO \"revenue\" SELECT * FROM \"revenue_old\";\"\"\") cur.execute(\"\"\"DROP TABLE \"revenue_old\";\"\"\") connection.commit()","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b partners"},{"location":"answer_2/#_1","text":"\u0412 \u043f\u0430\u043f\u043a\u0435 partners \u043b\u0435\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e xlsx \u0444\u0430\u0439\u043b\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043b\u044c\u0435\u043c \u0438\u0445 \u0432\u0441\u0435, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0432 \u0438\u0445 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c. \u0414\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f xlsx \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f create_merged_df, \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0442\u0435\u0439 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b xslx-\u043a\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b\u044b, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u044b\u043d\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0438 \u043a\u043e\u043d\u043a\u0430\u0442\u0430\u043d\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043a\u043e\u043d\u0446\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430: def create_merged_df(paths: List[str]): \"\"\" concatenates all dfs in the directory in a single one to rule them all \"\"\" dfs = [] for path in paths: temp = pd.read_excel(path, sheet_name=None)[\"Sheet1\"] dfs.append(temp) df = pd.concat(dfs) df.columns = [\"partner\", \"partner_code\"] return df \u041f\u0440\u0438 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044f check_if_duplicates \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 bool, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430: def check_if_duplicates(df): \"\"\" checks whether dfs contain any dupliacte rows \"\"\" pivot = pd.pivot_table(df, values=\"partner_code\", index=\"partner\", aggfunc=\"count\") if pivot[pivot[\"partner_code\"] > 1].shape[0] == 0: return False return True \u0414\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f to_sql \u0438\u0437 pandas: df.to_sql(\"partners\", con=connection, if_exists='append') \u041a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0442\u0430\u0431\u043b\u0438\u0446\u0430 revenue \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u043c\u0435\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u044e\u0447 \u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0435 partners, \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u043d\u0435\u043b\u043e\u0432\u043a\u043e, \u043d\u043e \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e. \u042d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c, \u0438\u043c\u043f\u043e\u0440\u0442\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0438 \u0437\u0430\u043c\u0435\u043d\u043e\u0439 \u0441\u0442\u0430\u0440\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u0432\u0435\u0436\u0435\u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439. \u042d\u0442\u043e \u043d\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043d\u043e\u0432\u043e \u0442\u0440\u0430\u0442\u0438\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043d\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u044e\u0447 \u0431\u0435\u0440\u0435\u0442 \u0432\u0435\u0440\u0445: def create_foreign_key(): \"\"\" whacky sql query for creating FOREIGN KEY constraint in revenue; renames old table, creates new one with the FOREIGN KEY constraint, loads data from the old to the new table and finally drops the old table \"\"\" connection = sqlite3.connect(\"../test.db\") # path to test.db cur = connection.cursor() cur.execute(\"\"\"ALTER TABLE \"revenue\" RENAME TO \"revenue_old\";\"\"\") cur.execute( \"\"\" CREATE TABLE \"revenue\" ( \"index\" INTEGER, \"id_guid\" TEXT, \"date_sale\" TEXT, \"warehouse\" TEXT, \"registr\" TEXT, \"partner_code\" TEXT, \"count\" TEXT, \"price_deal\" TEXT, FOREIGN KEY(partner_code) REFERENCES partners(partner_code)); \"\"\"); cur.execute(\"\"\"INSERT INTO \"revenue\" SELECT * FROM \"revenue_old\";\"\"\") cur.execute(\"\"\"DROP TABLE \"revenue_old\";\"\"\") connection.commit()","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"answer_3/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u00b6 \u0427\u0430\u0441\u0442\u044c \u0441 SQL / Python \u00b6 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 prices \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 nan \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u0442\u0438\u043f string. \u041f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043c \u0438\u0445 \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 NULL: cur.execute(\"\"\"UPDATE prices SET price_start = NULL WHERE price_start = \"nan\";\"\"\") cur.execute(\"\"\"UPDATE prices SET price_start2 = NULL WHERE price_start2 = \"nan\";\"\"\") cur.execute(\"\"\"UPDATE prices SET price_test = NULL WHERE price_test = \"nan\";\"\"\") \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043c\u0435\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0434, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e, \u0432\u0437\u044f\u0432 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u044b; \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438: query = ' \\ SELECT \\ partner.partner, \\ r.warehouse, \\ g.name_nom,\\ COALESCE(prices.price_start, prices.price_start2, prices.price_test) as \"product_price\", \\ r.price_deal, \\ r.date_sale, \\ r.count \\ FROM \\ revenue r \\ INNER JOIN \\ guid g ON r.id_guid = g.id_guid \\ INNER JOIN \\ prices ON g.id_guid = prices.id_guid \\ INNER JOIN \\ partners partner ON r.partner_code = partner.partner_code \\ WHERE \\ (r.date_sale BETWEEN \"2020-01-01 00:00:00\" AND \"2020-04-01 00:00:00\") OR \\ (r.date_sale BETWEEN \"2021-01-01 00:00:00\" AND \"2021-04-01 00:00:00\");' # obtaining dataframe by query df = pd.read_sql_query(query, connection) \u0412\u044b\u0431\u043e\u0440 COALESCE \u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 IFNULL \u0427\u0430\u0441\u0442\u044c \u0441 Python \u00b6 \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u0432 int \u0438 datetime: df[\"price_deal\"] = pd.to_numeric(df[\"price_deal\"]) df[\"product_price\"] = pd.to_numeric(df[\"product_price\"]) df[\"count\"] = pd.to_numeric(df[\"count\"]) \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0433\u043e\u0434-\u043c\u0435\u0441\u044f\u0446-\u0434\u0435\u043d\u044c \u043d\u0430 \u0433\u043e\u0434-\u043c\u0435\u0441\u044f\u0446 \u0438 \u0434\u0435\u043d\u044c, \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u043c \u0438\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b: df[\"day\"] = df[\"date_sale\"].apply(lambda dt: dt.strftime('%d')) df[\"date_sale\"] = df[\"date_sale\"].apply(lambda dt: dt.strftime('%Y-%m')) \u041f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0441\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0446\u0435\u043d\u0443 \u0438 \u0446\u0435\u043d\u0443 \u0442\u043e\u0432\u0430\u0440\u0430 \u043f\u043e \u0441\u043a\u043b\u0430\u0434\u0443, \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443 \u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044e \u0442\u043e\u0432\u0430\u0440\u0430 \u0437\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b 2021 \u0438 2022. \u041a\u0430\u043a \u044f \u043f\u043e\u043d\u044f\u043b \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u0430 \u0432\u0435\u0441\u044c \u043a\u0432\u0430\u0440\u0442\u0430\u043b \u043f\u043e \u0432\u044b\u0448\u0435\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c. \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443: df_1 = pd.pivot_table( df, index=[\"partner\", \"warehouse\", \"name_nom\"], values=[\"product_price\", \"price_deal\"], aggfunc=\"mean\") \u041a\u0430\u043a \u044f \u043f\u043e\u043d\u044f\u043b \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u043d\u0430\u043c \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430 \u043f\u043e \u0434\u043d\u044f\u043c \u0438 \u0441\u0443\u043c\u043c\u0443 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u0442\u043e\u0432\u0430\u0440\u0443 \u0437\u0430 \u043c\u0435\u0441\u044f\u0446. \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443: df_2 = pd.pivot_table( df, index=[\"partner\", \"warehouse\", \"name_nom\", \"date_sale\"], columns=\"day\", values=[\"count\"], aggfunc=\"sum\", margins=True, fill_value=0) \u0421\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0432\u0435 \u0441\u0432\u043e\u0434\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0447\u0435\u0440\u0435\u0437 merge. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u0438\u043c date_sale \u043a\u0430\u043a \u0438\u043d\u0434\u0435\u043a\u0441 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0435\u0433\u043e \u043a\u0430\u043a \u0441\u0442\u043e\u043b\u0431\u0435\u0446: df_2.reset_index(level=['date_sale'], inplace=True) df = pd.merge(df_1, df_2.droplevel(0, axis=1), left_index=True, right_index=True) \u0414\u0438\u0437\u0430\u0439\u043d \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u00b6 \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0448\u0438\u0440\u043e\u043a\u043e\u0439 \u0438\u0437-\u0437\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0434\u043d\u0435\u0439 \u043c\u0435\u0441\u044f\u0446\u0430. \u042d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e pivot_table \u0432 \u043d\u043e\u0432\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u044f\u0445 \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0431\u0435\u0437 '\u043b\u043e\u043c\u0430\u043d\u0438\u044f' pandas \u0438 \u0432\u0440\u0435\u0434\u0430 \u0434\u043b\u044f \u0440\u0430\u043d\u0442\u0430\u0439\u043c\u0430 \u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u0438\u0442\u043e\u0433\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u043d\u0435\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0434\u0438\u0437\u0430\u0439\u043d \u043c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435","title":"\u0426\u0435\u043d\u0430 \u043f\u043e \u043a\u0432\u0430\u0440\u0442\u0430\u043b\u0443"},{"location":"answer_3/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"answer_3/#sql_python","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 prices \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 nan \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u0442\u0438\u043f string. \u041f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043c \u0438\u0445 \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 NULL: cur.execute(\"\"\"UPDATE prices SET price_start = NULL WHERE price_start = \"nan\";\"\"\") cur.execute(\"\"\"UPDATE prices SET price_start2 = NULL WHERE price_start2 = \"nan\";\"\"\") cur.execute(\"\"\"UPDATE prices SET price_test = NULL WHERE price_test = \"nan\";\"\"\") \u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043c\u0435\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0434, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e, \u0432\u0437\u044f\u0432 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u044b; \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438: query = ' \\ SELECT \\ partner.partner, \\ r.warehouse, \\ g.name_nom,\\ COALESCE(prices.price_start, prices.price_start2, prices.price_test) as \"product_price\", \\ r.price_deal, \\ r.date_sale, \\ r.count \\ FROM \\ revenue r \\ INNER JOIN \\ guid g ON r.id_guid = g.id_guid \\ INNER JOIN \\ prices ON g.id_guid = prices.id_guid \\ INNER JOIN \\ partners partner ON r.partner_code = partner.partner_code \\ WHERE \\ (r.date_sale BETWEEN \"2020-01-01 00:00:00\" AND \"2020-04-01 00:00:00\") OR \\ (r.date_sale BETWEEN \"2021-01-01 00:00:00\" AND \"2021-04-01 00:00:00\");' # obtaining dataframe by query df = pd.read_sql_query(query, connection) \u0412\u044b\u0431\u043e\u0440 COALESCE \u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 IFNULL","title":"\u0427\u0430\u0441\u0442\u044c \u0441 SQL / Python"},{"location":"answer_3/#python","text":"\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u0432 int \u0438 datetime: df[\"price_deal\"] = pd.to_numeric(df[\"price_deal\"]) df[\"product_price\"] = pd.to_numeric(df[\"product_price\"]) df[\"count\"] = pd.to_numeric(df[\"count\"]) \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0433\u043e\u0434-\u043c\u0435\u0441\u044f\u0446-\u0434\u0435\u043d\u044c \u043d\u0430 \u0433\u043e\u0434-\u043c\u0435\u0441\u044f\u0446 \u0438 \u0434\u0435\u043d\u044c, \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u043c \u0438\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b: df[\"day\"] = df[\"date_sale\"].apply(lambda dt: dt.strftime('%d')) df[\"date_sale\"] = df[\"date_sale\"].apply(lambda dt: dt.strftime('%Y-%m')) \u041f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0441\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0446\u0435\u043d\u0443 \u0438 \u0446\u0435\u043d\u0443 \u0442\u043e\u0432\u0430\u0440\u0430 \u043f\u043e \u0441\u043a\u043b\u0430\u0434\u0443, \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443 \u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044e \u0442\u043e\u0432\u0430\u0440\u0430 \u0437\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b 2021 \u0438 2022. \u041a\u0430\u043a \u044f \u043f\u043e\u043d\u044f\u043b \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u0430 \u0432\u0435\u0441\u044c \u043a\u0432\u0430\u0440\u0442\u0430\u043b \u043f\u043e \u0432\u044b\u0448\u0435\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c. \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443: df_1 = pd.pivot_table( df, index=[\"partner\", \"warehouse\", \"name_nom\"], values=[\"product_price\", \"price_deal\"], aggfunc=\"mean\") \u041a\u0430\u043a \u044f \u043f\u043e\u043d\u044f\u043b \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u043d\u0430\u043c \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430 \u043f\u043e \u0434\u043d\u044f\u043c \u0438 \u0441\u0443\u043c\u043c\u0443 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u0442\u043e\u0432\u0430\u0440\u0443 \u0437\u0430 \u043c\u0435\u0441\u044f\u0446. \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443: df_2 = pd.pivot_table( df, index=[\"partner\", \"warehouse\", \"name_nom\", \"date_sale\"], columns=\"day\", values=[\"count\"], aggfunc=\"sum\", margins=True, fill_value=0) \u0421\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0432\u0435 \u0441\u0432\u043e\u0434\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0447\u0435\u0440\u0435\u0437 merge. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0443\u0434\u0430\u043b\u0438\u043c date_sale \u043a\u0430\u043a \u0438\u043d\u0434\u0435\u043a\u0441 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0435\u0433\u043e \u043a\u0430\u043a \u0441\u0442\u043e\u043b\u0431\u0435\u0446: df_2.reset_index(level=['date_sale'], inplace=True) df = pd.merge(df_1, df_2.droplevel(0, axis=1), left_index=True, right_index=True)","title":"\u0427\u0430\u0441\u0442\u044c \u0441 Python"},{"location":"answer_3/#_2","text":"\u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0448\u0438\u0440\u043e\u043a\u043e\u0439 \u0438\u0437-\u0437\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0434\u043d\u0435\u0439 \u043c\u0435\u0441\u044f\u0446\u0430. \u042d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e pivot_table \u0432 \u043d\u043e\u0432\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u044f\u0445 \u043d\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0431\u0435\u0437 '\u043b\u043e\u043c\u0430\u043d\u0438\u044f' pandas \u0438 \u0432\u0440\u0435\u0434\u0430 \u0434\u043b\u044f \u0440\u0430\u043d\u0442\u0430\u0439\u043c\u0430 \u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u0438\u0442\u043e\u0433\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u043d\u0435\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0434\u0438\u0437\u0430\u0439\u043d \u043c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435","title":"\u0414\u0438\u0437\u0430\u0439\u043d \u0442\u0430\u0431\u043b\u0438\u0446\u044b"},{"location":"answer_4/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u00b6 \u0427\u0430\u0441\u0442\u044c \u0441 SQL / Python \u00b6 \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438: query = ' \\ SELECT tv.\"date\", p.partner, tv.\"values\", tv.\"project\" FROM test_values tv \\ INNER JOIN partners p ON tv.partner_code = p.partner_code;' df = pd.read_sql_query(query, connection) \u0427\u0430\u0441\u0442\u044c \u0441 Python \u00b6 \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u0432 int \u0438 datetime. \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0434\u043e\u043b\u044f \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 values, \u0442\u043e \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0437 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f \u0434\u043d\u0438: df[\"date\"] = pd.to_datetime(df[\"date\"]) df[\"date\"] = df[\"date\"].apply(lambda dt: dt.strftime('%Y-%m')) df[\"values\"] = pd.to_numeric(df[\"values\"]) \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0441\u0447\u0438\u0442\u0430\u044e\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 values \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443, \u043c\u0435\u0441\u044f\u0446\u0443 \u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443: df_pivot = pd.pivot_table( df, index=[\"project\", \"date\", \"partner\"], values=\"values\", aggfunc=\"sum\") \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u0434\u043e\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 values \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043e\u0442 \u0432\u0441\u0435\u0439 \u0441\u0443\u043c\u043c\u044b values \u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \"% of values\": df_pivot[\"% of values\"] = (df_pivot[\"values\"] / df_pivot.groupby(level=0)[\"values\"].transform(sum) * 100) \u041a\u043e\u0434 \u0432\u044b\u0448\u0435 \u0431\u0435\u0440\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f values \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u0438 \u0434\u0435\u043b\u0438\u0442 \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 values \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443, \u0443\u043c\u043d\u043e\u0436\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430 100, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u043d\u0442. \u0414\u0438\u0437\u0430\u0439\u043d \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u00b6 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \"values\" \u0438 \"% of values\", \u0434\u0443\u043c\u0430\u044e \u0441 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u043c \"values\" \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043d\u044f\u0442\u043d\u0435\u0435 \u0438 \u043a\u0440\u0430\u0441\u0438\u0432\u0435\u0435","title":"\u0414\u043e\u043b\u044f \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c"},{"location":"answer_4/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"answer_4/#sql_python","text":"\u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438: query = ' \\ SELECT tv.\"date\", p.partner, tv.\"values\", tv.\"project\" FROM test_values tv \\ INNER JOIN partners p ON tv.partner_code = p.partner_code;' df = pd.read_sql_query(query, connection)","title":"\u0427\u0430\u0441\u0442\u044c \u0441 SQL / Python"},{"location":"answer_4/#python","text":"\u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u0432 int \u0438 datetime. \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0434\u043e\u043b\u044f \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 values, \u0442\u043e \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0437 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f \u0434\u043d\u0438: df[\"date\"] = pd.to_datetime(df[\"date\"]) df[\"date\"] = df[\"date\"].apply(lambda dt: dt.strftime('%Y-%m')) df[\"values\"] = pd.to_numeric(df[\"values\"]) \u0421\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u0432\u043e\u0434\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0441\u0447\u0438\u0442\u0430\u044e\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 values \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443, \u043c\u0435\u0441\u044f\u0446\u0443 \u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443: df_pivot = pd.pivot_table( df, index=[\"project\", \"date\", \"partner\"], values=\"values\", aggfunc=\"sum\") \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 \u0434\u043e\u043b\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 values \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043e\u0442 \u0432\u0441\u0435\u0439 \u0441\u0443\u043c\u043c\u044b values \u0437\u0430 \u043f\u0440\u043e\u0435\u043a\u0442, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \"% of values\": df_pivot[\"% of values\"] = (df_pivot[\"values\"] / df_pivot.groupby(level=0)[\"values\"].transform(sum) * 100) \u041a\u043e\u0434 \u0432\u044b\u0448\u0435 \u0431\u0435\u0440\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f values \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u0438 \u0434\u0435\u043b\u0438\u0442 \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 values \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443, \u0443\u043c\u043d\u043e\u0436\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430 100, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u043d\u0442.","title":"\u0427\u0430\u0441\u0442\u044c \u0441 Python"},{"location":"answer_4/#_2","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \"values\" \u0438 \"% of values\", \u0434\u0443\u043c\u0430\u044e \u0441 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u043c \"values\" \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043d\u044f\u0442\u043d\u0435\u0435 \u0438 \u043a\u0440\u0430\u0441\u0438\u0432\u0435\u0435","title":"\u0414\u0438\u0437\u0430\u0439\u043d \u0442\u0430\u0431\u043b\u0438\u0446\u044b"},{"location":"answer_5/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u00b6 \u0421\u043a\u0440\u0438\u043f\u0442\u044b \u0438 \u0438\u0445 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u00b6 create_table.py - \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u0441\u044f modify_xlsx.py - \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b\u044b xlsx, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 pandas \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a upload_data.py - \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 xlsx-\u043e\u043a \u0432 \u0431\u0434 \u041a\u043e\u0434 create_table.py \u00b6 \u0412\u0441\u0435 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0437\u0430\u0438\u0447\u043d\u043e - \u043a\u043e\u0434 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0432 \u0431\u0434: import sqlite3 connection = sqlite3.connect('../test.db') # path to test.db cur = connection.cursor() query = ' \\ CREATE TABLE \"call_data\" ( \\ \"index\" INTEGER, \\ \"link\" TEXT, \\ \"importance\" TEXT, \\ \"incoming\" TEXT, \\ \"description\" TEXT, \\ \"topic\" TEXT, \\ \"comment\" TEXT, \\ \"number\" TEXT, \\ \"product_amount\" TEXT);' cur.execute(query) connection.commit() \u041a\u043e\u0434 modify_xlsx.py \u00b6 \u0422\u0443\u0442 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u0435\u0435. Pandas \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0444\u0430\u0439\u043b, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u0435\u0442\u0430\u0444\u0430\u0439\u043b \"xl/ s haredStrings.xml\" \u0432\u043d\u0443\u0442\u0440\u0438 xlsx \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u043e \u0441\u0431\u0438\u0442\u044b\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043c \u0438 \u043d\u0430\u0437\u0432\u0430\u043d \"xl/ S haredStrings.xml\" (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0431\u044b\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438). \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043d\u0435 \u0445\u043e\u0447\u0435\u0442\u0441\u044f, \u0442\u0430\u043a \u043a\u0430\u043a xlsx \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0430\u0440\u0445\u0438\u0432, \u0438 \u044d\u0442\u043e \u043f\u043e\u0432\u043b\u0435\u0447\u0435\u0442 \u0437\u0430 \u0441\u043e\u0431\u043e\u0439 \u0440\u0430\u0437\u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0438 \u0442\u0440\u0430\u0442\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0427\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0441\u0451 \u043a\u0440\u0430\u0441\u0438\u0432\u043e: * \u043e\u0442\u043a\u0440\u043e\u0435\u043c \u0430\u0440\u0445\u0438\u0432 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f, * \u0441\u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0432 \u043d\u043e\u0432\u044b\u0439 \u0430\u0440\u0445\u0438\u0432, * \u0441\u0442\u0430\u0440\u044b\u0439 \u0430\u0440\u0445\u0438\u0432 \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u043e\u0437\u0436\u0435 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0438\u043b\u0438 \u0447\u0435\u0440\u0435\u0437 os.remove, \u043a\u0430\u043a \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0447\u0442\u043e \u0432\u0441\u0435 \u0437\u0430\u043b\u0438\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \\ \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0431\u0435\u0440\u0435\u043c \u043f\u0443\u0442\u044c \u0434\u043e \u0432\u0441\u0435\u0445 xlsx-\u043e\u043a \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438: from os import listdir from os.path import join, isfile import zipfile PATH = \"../\u0437\u0430\u043b\u0438\u0432\u043a\u0430\" paths = [join(PATH, f) for f in listdir(PATH) if isfile(join(PATH, f))] \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0430\u0440\u0445\u0438\u0432\u043e\u0432: try: for path in paths: \"\"\" renames 'xl/SharedStrings.xml' into 'xl/sharedStrings.xml' inside xlsx file, works without extracting files, new files have names like \"file_name.modified.xlsx\" \"\"\" # opens old archive with zipfile.ZipFile(path, mode=\"r\") as archive: # opens new archive with zipfile.ZipFile(path + \"_temp.xlsx\", 'w') as temp_zip: # reads data from old archive for item in archive.infolist(): # saves data in new archive modifying the xl/SharedStrings.xml if item.filename == 'xl/SharedStrings.xml': temp_zip.writestr('xl/sharedStrings.xml', archive.read(item.filename)) else: temp_zip.writestr(item.filename, archive.read(item.filename)) print(\"Script finished successfully\") except Exception as E: # not really nice print(f\"Error occured:\\n{E}\") \u041a\u043e\u0434 upload_data.py \u00b6 \u0421\u043e\u0431\u0435\u0440\u0435\u043c \u043f\u0443\u0442\u0438 \u0434\u043e \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442 connection: import pandas as pd from os import listdir from os.path import join, isfile from sqlalchemy import create_engine SQLITE_PATH = \"sqlite:///C:/Users/nickc/Desktop/\u0417\u0430\u0434\u0430\u043d\u0438\u044f/test.db\" PATH = \"../\u0437\u0430\u043b\u0438\u0432\u043a\u0430\" paths = [join(PATH, f) for f in listdir(PATH) if (isfile(join(PATH, f)) and (\"_temp.xlsx\" in f))] connection = create_engine(SQLITE_PATH) \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0445\u0430\u0440\u0434\u043a\u043e\u0434\u0438\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u0431\u0434 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438\u0445 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e: # obtain table with names db_column_names = pd.read_sql_query(\"PRAGMA table_info(call_data);\", connection) # get names from the table excluding index [1:] db_column_names = db_column_names[\"name\"].tolist()[1:] # cast to tuple db_column_names = tuple(db_column_names) \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0434: try: for path in paths: # ignore 7 rows with metadata df = pd.read_excel(path, header=7, sheet_name=None)[\"TDSheet\"] # drop unnamed df = df.loc[:, ~df.columns.str.contains('^Unnamed')] # rename columns df.columns = db_column_names # load to db df.to_sql(\"call_data\", con=connection, if_exists='append') print(\"Finished successfully\") except Exception as E: # not really nice print(f\"Error occured:\\n{E}\") \u041a\u043e\u0434 \u0432\u044b\u0448\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 7 \u0441\u0442\u0440\u043e\u043a \u0441 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b (\u043d\u0430\u0434\u043e \u043b\u0438 \u0438\u0445 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c?), \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0431\u0435\u0437\u044b\u043c\u044f\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0438\u043c\u0435\u043d\u0443\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0440\u0430\u043d\u0435\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432 \u0431\u0434","title":"\u0417\u0430\u043b\u0438\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438"},{"location":"answer_5/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"answer_5/#_2","text":"create_table.py - \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u0441\u044f modify_xlsx.py - \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b\u044b xlsx, \u0447\u0442\u043e\u0431\u044b \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 pandas \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a upload_data.py - \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 xlsx-\u043e\u043a \u0432 \u0431\u0434","title":"\u0421\u043a\u0440\u0438\u043f\u0442\u044b \u0438 \u0438\u0445 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435"},{"location":"answer_5/#create_tablepy","text":"\u0412\u0441\u0435 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0437\u0430\u0438\u0447\u043d\u043e - \u043a\u043e\u0434 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0432 \u0431\u0434: import sqlite3 connection = sqlite3.connect('../test.db') # path to test.db cur = connection.cursor() query = ' \\ CREATE TABLE \"call_data\" ( \\ \"index\" INTEGER, \\ \"link\" TEXT, \\ \"importance\" TEXT, \\ \"incoming\" TEXT, \\ \"description\" TEXT, \\ \"topic\" TEXT, \\ \"comment\" TEXT, \\ \"number\" TEXT, \\ \"product_amount\" TEXT);' cur.execute(query) connection.commit()","title":"\u041a\u043e\u0434 create_table.py"},{"location":"answer_5/#modify_xlsxpy","text":"\u0422\u0443\u0442 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u0435\u0435. Pandas \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0444\u0430\u0439\u043b, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u0435\u0442\u0430\u0444\u0430\u0439\u043b \"xl/ s haredStrings.xml\" \u0432\u043d\u0443\u0442\u0440\u0438 xlsx \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u043e \u0441\u0431\u0438\u0442\u044b\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043c \u0438 \u043d\u0430\u0437\u0432\u0430\u043d \"xl/ S haredStrings.xml\" (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0431\u044b\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438). \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043d\u0435 \u0445\u043e\u0447\u0435\u0442\u0441\u044f, \u0442\u0430\u043a \u043a\u0430\u043a xlsx \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0430\u0440\u0445\u0438\u0432, \u0438 \u044d\u0442\u043e \u043f\u043e\u0432\u043b\u0435\u0447\u0435\u0442 \u0437\u0430 \u0441\u043e\u0431\u043e\u0439 \u0440\u0430\u0437\u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0438 \u0442\u0440\u0430\u0442\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0427\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0441\u0451 \u043a\u0440\u0430\u0441\u0438\u0432\u043e: * \u043e\u0442\u043a\u0440\u043e\u0435\u043c \u0430\u0440\u0445\u0438\u0432 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f, * \u0441\u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0432 \u043d\u043e\u0432\u044b\u0439 \u0430\u0440\u0445\u0438\u0432, * \u0441\u0442\u0430\u0440\u044b\u0439 \u0430\u0440\u0445\u0438\u0432 \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u043e\u0437\u0436\u0435 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0438\u043b\u0438 \u0447\u0435\u0440\u0435\u0437 os.remove, \u043a\u0430\u043a \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0447\u0442\u043e \u0432\u0441\u0435 \u0437\u0430\u043b\u0438\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \\ \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0431\u0435\u0440\u0435\u043c \u043f\u0443\u0442\u044c \u0434\u043e \u0432\u0441\u0435\u0445 xlsx-\u043e\u043a \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438: from os import listdir from os.path import join, isfile import zipfile PATH = \"../\u0437\u0430\u043b\u0438\u0432\u043a\u0430\" paths = [join(PATH, f) for f in listdir(PATH) if isfile(join(PATH, f))] \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0430\u0440\u0445\u0438\u0432\u043e\u0432: try: for path in paths: \"\"\" renames 'xl/SharedStrings.xml' into 'xl/sharedStrings.xml' inside xlsx file, works without extracting files, new files have names like \"file_name.modified.xlsx\" \"\"\" # opens old archive with zipfile.ZipFile(path, mode=\"r\") as archive: # opens new archive with zipfile.ZipFile(path + \"_temp.xlsx\", 'w') as temp_zip: # reads data from old archive for item in archive.infolist(): # saves data in new archive modifying the xl/SharedStrings.xml if item.filename == 'xl/SharedStrings.xml': temp_zip.writestr('xl/sharedStrings.xml', archive.read(item.filename)) else: temp_zip.writestr(item.filename, archive.read(item.filename)) print(\"Script finished successfully\") except Exception as E: # not really nice print(f\"Error occured:\\n{E}\")","title":"\u041a\u043e\u0434 modify_xlsx.py"},{"location":"answer_5/#upload_datapy","text":"\u0421\u043e\u0431\u0435\u0440\u0435\u043c \u043f\u0443\u0442\u0438 \u0434\u043e \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442 connection: import pandas as pd from os import listdir from os.path import join, isfile from sqlalchemy import create_engine SQLITE_PATH = \"sqlite:///C:/Users/nickc/Desktop/\u0417\u0430\u0434\u0430\u043d\u0438\u044f/test.db\" PATH = \"../\u0437\u0430\u043b\u0438\u0432\u043a\u0430\" paths = [join(PATH, f) for f in listdir(PATH) if (isfile(join(PATH, f)) and (\"_temp.xlsx\" in f))] connection = create_engine(SQLITE_PATH) \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0445\u0430\u0440\u0434\u043a\u043e\u0434\u0438\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u0431\u0434 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438\u0445 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e: # obtain table with names db_column_names = pd.read_sql_query(\"PRAGMA table_info(call_data);\", connection) # get names from the table excluding index [1:] db_column_names = db_column_names[\"name\"].tolist()[1:] # cast to tuple db_column_names = tuple(db_column_names) \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0434: try: for path in paths: # ignore 7 rows with metadata df = pd.read_excel(path, header=7, sheet_name=None)[\"TDSheet\"] # drop unnamed df = df.loc[:, ~df.columns.str.contains('^Unnamed')] # rename columns df.columns = db_column_names # load to db df.to_sql(\"call_data\", con=connection, if_exists='append') print(\"Finished successfully\") except Exception as E: # not really nice print(f\"Error occured:\\n{E}\") \u041a\u043e\u0434 \u0432\u044b\u0448\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 7 \u0441\u0442\u0440\u043e\u043a \u0441 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b (\u043d\u0430\u0434\u043e \u043b\u0438 \u0438\u0445 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c?), \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0431\u0435\u0437\u044b\u043c\u044f\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0438\u043c\u0435\u043d\u0443\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0440\u0430\u043d\u0435\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u043c \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432 \u0431\u0434","title":"\u041a\u043e\u0434 upload_data.py"}]}